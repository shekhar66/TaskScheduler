{"ast":null,"code":"var _jsxFileName = \"/home/allareddisekharreddy/Aritic/Expenses/src/Context/task-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/React.createContext({\n  tasks: [],\n  updateTasks: task => {},\n  isLoading: false\n});\nexport const TaskContextProvider = props => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const request = async () => {\n      setIsLoading(true);\n      const response = await fetch(\"https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks.json\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          title: data[taskKey].title,\n          description: data[taskKey].description,\n          dueDate: data[taskKey].dueDate,\n          type: data[taskKey].type\n        });\n      }\n\n      setTasks(loadedTasks);\n      setIsLoading(false);\n    };\n\n    request();\n  }, []);\n\n  const updateTaskHandler = updatedTask => {\n    console.log(tasks);\n    console.log(updatedTask);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: tasks,\n      updateTasks: updateTaskHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskContextProvider, \"OVzUBSx2NbFmMswxqYZWIAAvy9Q=\");\n\n_c = TaskContextProvider;\nexport default TaskContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskContextProvider\");","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/Expenses/src/Context/task-context.js"],"names":["React","useEffect","useState","TaskContext","createContext","tasks","updateTasks","task","isLoading","TaskContextProvider","props","setTasks","setIsLoading","request","response","fetch","method","headers","data","json","loadedTasks","taskKey","push","id","title","description","dueDate","type","updateTaskHandler","updatedTask","console","log","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,WAAW,EAAGC,IAAD,IAAU,CAAE,CAFa;AAGtCC,EAAAA,SAAS,EAAE;AAH2B,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,SAAD,EAAYI,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,OAAO,GAAG,YAAY;AAC1BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mEAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFX,OAF0B,CAA5B;AAOA,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AAC1BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAAEF,OADW;AAEfG,UAAAA,KAAK,EAAEN,IAAI,CAACG,OAAD,CAAJ,CAAcG,KAFN;AAGfC,UAAAA,WAAW,EAAEP,IAAI,CAACG,OAAD,CAAJ,CAAcI,WAHZ;AAIfC,UAAAA,OAAO,EAAER,IAAI,CAACG,OAAD,CAAJ,CAAcK,OAJR;AAKfC,UAAAA,IAAI,EAAET,IAAI,CAACG,OAAD,CAAJ,CAAcM;AALL,SAAjB;AAOD;;AACDhB,MAAAA,QAAQ,CAACS,WAAD,CAAR;AACAR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAtBD;;AAuBAC,IAAAA,OAAO;AACR,GAzBQ,EAyBN,EAzBM,CAAT;;AA0BA,QAAMe,iBAAiB,GAAIC,WAAD,IAAiB;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACD,GAHD;;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLxB,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,WAAW,EAAEsB;AAFR,KADT;AAAA,cAMGlB,KAAK,CAACsB;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA5CM;;GAAMvB,mB;;KAAAA,mB;AA8Cb,eAAeN,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst TaskContext = React.createContext({\n  tasks: [],\n  updateTasks: (task) => {},\n  isLoading: false,\n});\n\nexport const TaskContextProvider = (props) => {\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const request = async () => {\n      setIsLoading(true);\n      const response = await fetch(\n        \"https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks.json\",\n        {\n          method: \"GET\",\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n      const data = await response.json();\n      const loadedTasks = [];\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          title: data[taskKey].title,\n          description: data[taskKey].description,\n          dueDate: data[taskKey].dueDate,\n          type: data[taskKey].type,\n        });\n      }\n      setTasks(loadedTasks);\n      setIsLoading(false);\n    };\n    request();\n  }, []);\n  const updateTaskHandler = (updatedTask) => {\n    console.log(tasks);\n    console.log(updatedTask);\n  };\n  return (\n    <TaskContext.Provider\n      value={{\n        tasks: tasks,\n        updateTasks: updateTaskHandler,\n      }}\n    >\n      {props.children}\n    </TaskContext.Provider>\n  );\n};\n\nexport default TaskContext;\n"]},"metadata":{},"sourceType":"module"}