{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (request, applyData) => {\n    setIsLoading(true);\n\n    try {\n      const requestBody = {\n        method: request.method ? request.method : \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      if (request.body) {\n        requestBody.push({\n          body: request.body\n        });\n      }\n\n      const response = await fetch(request.url, requestBody);\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(\"Failed to send the request..!!!\");\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    sendRequest,\n    error\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;\n/* const data = await response.json();\n      const loadedTasks = [];\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          title: data[taskKey].title,\n          description: data[taskKey].description,\n          dueDate: data[taskKey].dueDate,\n          type: data[taskKey].type,\n        });\n      } */","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/Expenses/src/CustomHooks/useHttp.js"],"names":["useCallback","useState","useHttp","isLoading","setIsLoading","error","setError","sendRequest","request","applyData","requestBody","method","headers","body","push","response","fetch","url","data","json","err"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,WAAW,GAAGP,WAAW,CAAC,OAAOQ,OAAP,EAAgBC,SAAhB,KAA8B;AAC5DL,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMM,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAEH,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACG,MAAzB,GAAkC,KADxB;AAElBC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFS,OAApB;;AAIA,UAAIJ,OAAO,CAACK,IAAZ,EAAkB;AAChBH,QAAAA,WAAW,CAACI,IAAZ,CAAiB;AAAED,UAAAA,IAAI,EAAEL,OAAO,CAACK;AAAhB,SAAjB;AACD;;AACD,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACR,OAAO,CAACS,GAAT,EAAcP,WAAd,CAA5B;AACA,YAAMQ,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAV,MAAAA,SAAS,CAACS,IAAD,CAAT;AACD,KAXD,CAWE,OAAOE,GAAP,EAAY;AACZd,MAAAA,QAAQ,CAAC,iCAAD,CAAR;AACD;;AACDF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAjB8B,EAiB5B,EAjB4B,CAA/B;AAkBA,SAAO;AACLD,IAAAA,SADK;AAELI,IAAAA,WAFK;AAGLF,IAAAA;AAHK,GAAP;AAKD,CA3BD;;GAAMH,O;;AA4BN,eAAeA,OAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useCallback, useState } from \"react\";\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(async (request, applyData) => {\n    setIsLoading(true);\n    try {\n      const requestBody = {\n        method: request.method ? request.method : \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n      if (request.body) {\n        requestBody.push({ body: request.body });\n      }\n      const response = await fetch(request.url, requestBody);\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(\"Failed to send the request..!!!\");\n    }\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    sendRequest,\n    error,\n  };\n};\nexport default useHttp;\n\n/* const data = await response.json();\n      const loadedTasks = [];\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          title: data[taskKey].title,\n          description: data[taskKey].description,\n          dueDate: data[taskKey].dueDate,\n          type: data[taskKey].type,\n        });\n      } */\n"]},"metadata":{},"sourceType":"module"}