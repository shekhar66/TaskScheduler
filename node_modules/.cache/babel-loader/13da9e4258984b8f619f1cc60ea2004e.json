{"ast":null,"code":"var _jsxFileName = \"/home/allareddisekharreddy/Aritic/TasksScheduler/src/Components/TaskForm.js\",\n    _s = $RefreshSig$();\n\nimport { Accordion, Card } from \"react-bootstrap\";\nimport Header from \"./Header\";\nimport NewTask from \"./NewTask\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../Assets/TaskForm.css\";\nimport Notification from \"./Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskForm = props => {\n  _s();\n\n  const notification = useSelector(prevState => {\n    return prevState.notification;\n  });\n  const dispatch = useDispatch();\n\n  const onAddTaskHandler = async task => {\n    dispatch({\n      type: \"loading\",\n      loading: true\n    });\n\n    try {\n      const response = await fetch(\"https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks.json\", {\n        method: \"POST\",\n        body: JSON.stringify(task),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const resp = await response.json();\n\n      if (resp.name) {\n        dispatch({\n          type: \"add\",\n          task: { ...task,\n            id: resp.name\n          }\n        });\n        dispatch({\n          type: \"loading\",\n          loading: false\n        });\n        dispatch({\n          type: \"notification\",\n          notification: {\n            message: \"Task has been added sucessfully..!!!\"\n          }\n        }); // Close the Add New Form once Added\n\n        document.querySelector(\".add-task-header>button\").click();\n      }\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"add-task-card\",\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      color: notification.color,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      className: \"add-task-card\",\n      children: /*#__PURE__*/_jsxDEV(Accordion, {\n        children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n          className: \"add-task-header\",\n          children: /*#__PURE__*/_jsxDEV(Header, {\n            name: \"Add Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n          children: /*#__PURE__*/_jsxDEV(NewTask, {\n            addTask: onAddTaskHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskForm, \"mP/AQXICY5VmWF8o5aEFIJzGT6g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = TaskForm;\nexport default TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/TasksScheduler/src/Components/TaskForm.js"],"names":["Accordion","Card","Header","NewTask","useDispatch","useSelector","Notification","TaskForm","props","notification","prevState","dispatch","onAddTaskHandler","task","type","loading","response","fetch","method","body","JSON","stringify","headers","resp","json","name","id","message","document","querySelector","click","err","color"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,wBAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,YAAY,GAAGJ,WAAW,CAAEK,SAAD,IAAe;AAC9C,WAAOA,SAAS,CAACD,YAAjB;AACD,GAF+B,CAAhC;AAGA,QAAME,QAAQ,GAAGP,WAAW,EAA5B;;AACA,QAAMQ,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AACvCF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAE;AAA5B,KAAD,CAAR;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mEAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAFR;AAGES,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAHX,OAF0B,CAA5B;AAQA,YAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AACA,UAAID,IAAI,CAACE,IAAT,EAAe;AACbd,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,KAAR;AAAeD,UAAAA,IAAI,EAAE,EAAE,GAAGA,IAAL;AAAWa,YAAAA,EAAE,EAAEH,IAAI,CAACE;AAApB;AAArB,SAAD,CAAR;AACAd,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAD,CAAR;AACAJ,QAAAA,QAAQ,CAAC;AACPG,UAAAA,IAAI,EAAE,cADC;AAEPL,UAAAA,YAAY,EAAE;AAAEkB,YAAAA,OAAO,EAAE;AAAX;AAFP,SAAD,CAAR,CAHa,CAOb;;AACAC,QAAAA,QAAQ,CAACC,aAAT,CAAuB,yBAAvB,EAAkDC,KAAlD;AACD;AACF,KApBD,CAoBE,OAAOC,GAAP,EAAY,CAAE;AACjB,GAvBD;;AAwBA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEtB,YAAY,CAACuB,KAAlC;AAAyC,MAAA,OAAO,EAAEvB,YAAY,CAACkB;AAA/D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,eAArB;AAAA,6BACE,QAAC,SAAD;AAAA,gCACE,QAAC,SAAD,CAAW,MAAX;AAAkB,UAAA,SAAS,EAAC,iBAA5B;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,SAAD,CAAW,IAAX;AAAA,iCACE,QAAC,OAAD;AAAS,YAAA,OAAO,EAAEf;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA5CD;;GAAML,Q;UACiBF,W,EAGJD,W;;;KAJbG,Q;AA8CN,eAAeA,QAAf","sourcesContent":["import { Accordion, Card } from \"react-bootstrap\";\nimport Header from \"./Header\";\nimport NewTask from \"./NewTask\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../Assets/TaskForm.css\";\nimport Notification from \"./Notification\";\n\nconst TaskForm = (props) => {\n  const notification = useSelector((prevState) => {\n    return prevState.notification;\n  });\n  const dispatch = useDispatch();\n  const onAddTaskHandler = async (task) => {\n    dispatch({ type: \"loading\", loading: true });\n    try {\n      const response = await fetch(\n        \"https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(task),\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n      const resp = await response.json();\n      if (resp.name) {\n        dispatch({ type: \"add\", task: { ...task, id: resp.name } });\n        dispatch({ type: \"loading\", loading: false });\n        dispatch({\n          type: \"notification\",\n          notification: { message: \"Task has been added sucessfully..!!!\" },\n        });\n        // Close the Add New Form once Added\n        document.querySelector(\".add-task-header>button\").click();\n      }\n    } catch (err) {}\n  };\n  return (\n    <Card className=\"add-task-card\">\n      <Notification color={notification.color} message={notification.message} />\n      <Card.Body className=\"add-task-card\">\n        <Accordion>\n          <Accordion.Header className=\"add-task-header\">\n            <Header name=\"Add Task\" />\n          </Accordion.Header>\n          <Accordion.Body>\n            <NewTask addTask={onAddTaskHandler} />\n          </Accordion.Body>\n        </Accordion>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}