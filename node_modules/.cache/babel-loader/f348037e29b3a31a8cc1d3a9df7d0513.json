{"ast":null,"code":"var _jsxFileName = \"/home/allareddisekharreddy/Aritic/TasksScheduler/src/Components/Content/Task/EditTaskForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Offcanvas } from \"react-bootstrap\";\nimport NewTask from \"./NewTask\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditTaskForm = props => {\n  _s();\n\n  const editTask = useSelector(prevTasks => prevTasks.tasks.find(task => {\n    return task.id === props.taskid;\n  }));\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const [taskDetails, setTaskDetals] = useState({});\n\n  const handleShow = () => {\n    const request = async () => {\n      if (props.taskid) {\n        setTaskDetals(editTask);\n        setShow(true);\n      }\n    };\n\n    request();\n  };\n\n  const editTaskHandler = async data => {\n    setShow(false);\n    dispatch({\n      type: \"loading\",\n      loading: true\n    });\n    const response = await fetch(`https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks/${props.taskid}.json`, {\n      method: \"PATCH\",\n      body: JSON.stringify({ ...data,\n        id: props.taskid\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.ok) {\n      dispatch({\n        type: \"edit\",\n        task: { ...data,\n          id: props.taskid\n        }\n      });\n      dispatch({\n        type: \"loading\",\n        loading: false\n      });\n      dispatch({\n        type: \"notification\",\n        notification: {\n          message: \"Task has been updated sucessfully..!!!\",\n          color: \"orange\"\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleShow,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Offcanvas, {\n      show: show,\n      onHide: handleClose,\n      placement: \"end\",\n      children: [/*#__PURE__*/_jsxDEV(Offcanvas.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Offcanvas.Title, {\n          children: \"Edit Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Offcanvas.Body, {\n        children: /*#__PURE__*/_jsxDEV(NewTask, {\n          addTask: editTaskHandler,\n          taskDetails: taskDetails,\n          isEditForm: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditTaskForm, \"c4dSxjUmtiAb1G81dfD4kLOkLdU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = EditTaskForm;\nexport default EditTaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditTaskForm\");","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/TasksScheduler/src/Components/Content/Task/EditTaskForm.js"],"names":["React","useState","Button","Offcanvas","NewTask","useSelector","useDispatch","EditTaskForm","props","editTask","prevTasks","tasks","find","task","id","taskid","dispatch","show","setShow","handleClose","taskDetails","setTaskDetals","handleShow","request","editTaskHandler","data","type","loading","response","fetch","method","body","JSON","stringify","headers","ok","notification","message","color"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Offcanvas } from \"react-bootstrap\";\nimport NewTask from \"./NewTask\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst EditTaskForm = (props) => {\n  const editTask = useSelector((prevTasks) =>\n    prevTasks.tasks.find((task) => {\n      return task.id === props.taskid;\n    })\n  );\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const [taskDetails, setTaskDetals] = useState({});\n\n  const handleShow = () => {\n    const request = async () => {\n      if (props.taskid) {\n        setTaskDetals(editTask);\n        setShow(true);\n      }\n    };\n    request();\n  };\n\n  const editTaskHandler = async (data) => {\n    setShow(false);\n    dispatch({ type: \"loading\", loading: true });\n    const response = await fetch(\n      `https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks/${props.taskid}.json`,\n      {\n        method: \"PATCH\",\n        body: JSON.stringify({ ...data, id: props.taskid }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    if (response.ok) {\n      dispatch({ type: \"edit\", task: { ...data, id: props.taskid } });\n      dispatch({ type: \"loading\", loading: false });\n      dispatch({\n        type: \"notification\",\n        notification: {\n          message: \"Task has been updated sucessfully..!!!\",\n          color: \"orange\",\n        },\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={handleShow}>Edit</Button>{\" \"}\n      <Offcanvas show={show} onHide={handleClose} placement=\"end\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Edit Task</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <NewTask\n            addTask={editTaskHandler}\n            taskDetails={taskDetails}\n            isEditForm={true}\n          />\n        </Offcanvas.Body>\n      </Offcanvas>\n    </React.Fragment>\n  );\n};\n\nexport default EditTaskForm;\n"]},"metadata":{},"sourceType":"module"}