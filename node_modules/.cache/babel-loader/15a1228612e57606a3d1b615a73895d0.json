{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  notification: {}\n};\n\nconst taskManager = function () {\n  let taskState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"fetch\") {\n    return {\n      tasks: action.tasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification\n    };\n  }\n\n  if (action.type === \"add\") {\n    return {\n      tasks: [...taskState.tasks, action.task],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification\n    };\n  }\n\n  if (action.type === \"edit\") {\n    const updatedTasks = [];\n\n    for (let i = 0; i < taskState.tasks.length; i++) {\n      if (taskState.tasks[i].id === action.task.id) {\n        updatedTasks.push(action.task);\n      } else {\n        updatedTasks.push(taskState.tasks[i]);\n      }\n    }\n\n    return {\n      tasks: updatedTasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification\n    };\n  }\n\n  if (action.type === \"delete\") {\n    return {\n      tasks: [...taskState.tasks.filter(task => {\n        return task.id !== action.taskId;\n      })],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification\n    };\n  }\n\n  if (action.type === \"loading\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: taskState.notification\n    };\n  }\n\n  if (action.type === \"notification\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: action.notification\n    };\n  }\n\n  return taskState;\n};\n\nconst store = createStore(taskManager);\nexport default store;","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/TasksScheduler/src/Redux/store.js"],"names":["createStore","initialState","tasks","isLoading","notification","taskManager","taskState","action","type","task","updatedTasks","i","length","id","push","filter","taskId","loading","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,SAAS,EAAE,KAAxB;AAA+BC,EAAAA,YAAY,EAAE;AAA7C,CAArB;;AACA,MAAMC,WAAW,GAAG,YAAsC;AAAA,MAArCC,SAAqC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AACxD,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AACLN,MAAAA,KAAK,EAAEK,MAAM,CAACL,KADT;AAELC,MAAAA,SAAS,EAAEG,SAAS,CAACH,SAFhB;AAGLC,MAAAA,YAAY,EAAEE,SAAS,CAACF;AAHnB,KAAP;AAKD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,WAAO;AACLN,MAAAA,KAAK,EAAE,CAAC,GAAGI,SAAS,CAACJ,KAAd,EAAqBK,MAAM,CAACE,IAA5B,CADF;AAELN,MAAAA,SAAS,EAAEG,SAAS,CAACH,SAFhB;AAGLC,MAAAA,YAAY,EAAEE,SAAS,CAACF;AAHnB,KAAP;AAKD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,UAAME,YAAY,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACJ,KAAV,CAAgBU,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAIL,SAAS,CAACJ,KAAV,CAAgBS,CAAhB,EAAmBE,EAAnB,KAA0BN,MAAM,CAACE,IAAP,CAAYI,EAA1C,EAA8C;AAC5CH,QAAAA,YAAY,CAACI,IAAb,CAAkBP,MAAM,CAACE,IAAzB;AACD,OAFD,MAEO;AACLC,QAAAA,YAAY,CAACI,IAAb,CAAkBR,SAAS,CAACJ,KAAV,CAAgBS,CAAhB,CAAlB;AACD;AACF;;AACD,WAAO;AACLT,MAAAA,KAAK,EAAEQ,YADF;AAELP,MAAAA,SAAS,EAAEG,SAAS,CAACH,SAFhB;AAGLC,MAAAA,YAAY,EAAEE,SAAS,CAACF;AAHnB,KAAP;AAKD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLN,MAAAA,KAAK,EAAE,CACL,GAAGI,SAAS,CAACJ,KAAV,CAAgBa,MAAhB,CAAwBN,IAAD,IAAU;AAClC,eAAOA,IAAI,CAACI,EAAL,KAAYN,MAAM,CAACS,MAA1B;AACD,OAFE,CADE,CADF;AAMLb,MAAAA,SAAS,EAAEG,SAAS,CAACH,SANhB;AAOLC,MAAAA,YAAY,EAAEE,SAAS,CAACF;AAPnB,KAAP;AASD;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,WAAO;AACLN,MAAAA,KAAK,EAAEI,SAAS,CAACJ,KADZ;AAELC,MAAAA,SAAS,EAAEI,MAAM,CAACU,OAFb;AAGLb,MAAAA,YAAY,EAAEE,SAAS,CAACF;AAHnB,KAAP;AAKD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;AAClC,WAAO;AACLN,MAAAA,KAAK,EAAEI,SAAS,CAACJ,KADZ;AAELC,MAAAA,SAAS,EAAEI,MAAM,CAACU,OAFb;AAGLb,MAAAA,YAAY,EAAEG,MAAM,CAACH;AAHhB,KAAP;AAKD;;AACD,SAAOE,SAAP;AACD,CAzDD;;AA0DA,MAAMY,KAAK,GAAGlB,WAAW,CAACK,WAAD,CAAzB;AAEA,eAAea,KAAf","sourcesContent":["import { createStore } from \"redux\";\n\nconst initialState = { tasks: [], isLoading: false, notification: {} };\nconst taskManager = (taskState = initialState, action) => {\n  if (action.type === \"fetch\") {\n    return {\n      tasks: action.tasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n    };\n  }\n  if (action.type === \"add\") {\n    return {\n      tasks: [...taskState.tasks, action.task],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n    };\n  }\n  if (action.type === \"edit\") {\n    const updatedTasks = [];\n    for (let i = 0; i < taskState.tasks.length; i++) {\n      if (taskState.tasks[i].id === action.task.id) {\n        updatedTasks.push(action.task);\n      } else {\n        updatedTasks.push(taskState.tasks[i]);\n      }\n    }\n    return {\n      tasks: updatedTasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n    };\n  }\n  if (action.type === \"delete\") {\n    return {\n      tasks: [\n        ...taskState.tasks.filter((task) => {\n          return task.id !== action.taskId;\n        }),\n      ],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n    };\n  }\n\n  if (action.type === \"loading\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: taskState.notification,\n    };\n  }\n  if (action.type === \"notification\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: action.notification,\n    };\n  }\n  return taskState;\n};\nconst store = createStore(taskManager);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}