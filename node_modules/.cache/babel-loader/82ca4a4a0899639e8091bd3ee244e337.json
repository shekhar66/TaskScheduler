{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  notification: {},\n  filteredTaks: []\n};\n\nconst taskManager = function () {\n  let taskState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"fetch\") {\n    return {\n      tasks: action.tasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"add\") {\n    return {\n      tasks: [...taskState.tasks, action.task],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"edit\") {\n    const updatedTasks = [];\n\n    for (let i = 0; i < taskState.tasks.length; i++) {\n      if (taskState.tasks[i].id === action.task.id) {\n        updatedTasks.push(action.task);\n      } else {\n        updatedTasks.push(taskState.tasks[i]);\n      }\n    }\n\n    return {\n      tasks: updatedTasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"delete\") {\n    return {\n      tasks: [...taskState.tasks.filter(task => {\n        return task.id !== action.taskId;\n      })],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"loading\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"notification\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.isLoading,\n      notification: action.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"filter\") {\n    console.log(action.filtervalue);\n    let updatedTasks = taskState.tasks;\n\n    if (action.filtervalue) {\n      updatedTasks = updatedTasks.filter(task => {\n        return task.title !== action.filtervalue;\n      });\n    }\n\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.loading,\n      notification: taskState.notification,\n      filteredTasks: updatedTasks\n    };\n  }\n\n  return taskState;\n};\n\nconst store = createStore(taskManager);\nexport default store;","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/TasksScheduler/src/Redux/store.js"],"names":["createStore","initialState","tasks","isLoading","notification","filteredTaks","taskManager","taskState","action","type","filteredTasks","task","updatedTasks","i","length","id","push","filter","taskId","loading","console","log","filtervalue","title","store"],"mappings":"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","sourcesContent":["import { createStore } from \"redux\";\n\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  notification: {},\n  filteredTaks: [],\n};\nconst taskManager = (taskState = initialState, action) => {\n  if (action.type === \"fetch\") {\n    return {\n      tasks: action.tasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"add\") {\n    return {\n      tasks: [...taskState.tasks, action.task],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"edit\") {\n    const updatedTasks = [];\n    for (let i = 0; i < taskState.tasks.length; i++) {\n      if (taskState.tasks[i].id === action.task.id) {\n        updatedTasks.push(action.task);\n      } else {\n        updatedTasks.push(taskState.tasks[i]);\n      }\n    }\n    return {\n      tasks: updatedTasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"delete\") {\n    return {\n      tasks: [\n        ...taskState.tasks.filter((task) => {\n          return task.id !== action.taskId;\n        }),\n      ],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n\n  if (action.type === \"loading\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"notification\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.isLoading,\n      notification: action.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"filter\") {\n    console.log(action.filtervalue);\n    let updatedTasks = taskState.tasks;\n    if (action.filtervalue) {\n      updatedTasks = updatedTasks.filter((task) => {\n        return task.title !== action.filtervalue;\n      });\n    }\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.loading,\n      notification: taskState.notification,\n      filteredTasks: updatedTasks,\n    };\n  }\n  return taskState;\n};\nconst store = createStore(taskManager);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}