{"ast":null,"code":"var _jsxFileName = \"/home/allareddisekharreddy/Aritic/TasksScheduler/src/Components/Content/Task/TaskForm.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Offcanvas } from \"react-bootstrap\";\nimport NewTask from \"./NewTask\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../../Assets/TaskForm.css\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskForm = props => {\n  _s();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const notification = useSelector(prevState => {\n    return prevState.notification;\n  });\n  const dispatch = useDispatch();\n\n  const onAddTaskHandler = async task => {\n    dispatch({\n      type: \"loading\",\n      loading: true\n    });\n\n    try {\n      const response = await fetch(\"https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks.json\", {\n        method: \"POST\",\n        body: JSON.stringify(task),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const resp = await response.json();\n\n      if (resp.name) {\n        dispatch({\n          type: \"add\",\n          task: { ...task,\n            id: resp.name\n          }\n        });\n        dispatch({\n          type: \"loading\",\n          loading: false\n        });\n        dispatch({\n          type: \"notification\",\n          notification: {\n            message: \"Task has been added sucessfully..!!!\"\n          }\n        }); // Close the Add New Form once Added\n\n        document.querySelector(\".add-task-header>button\").click();\n      }\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleShow,\n      children: \"+Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Offcanvas, {\n      show: show,\n      onHide: handleClose,\n      placement: \"end\",\n      children: [/*#__PURE__*/_jsxDEV(Offcanvas.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Offcanvas.Title, {\n          children: \"New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Offcanvas.Body, {\n        children: /*#__PURE__*/_jsxDEV(NewTask, {\n          addTask: onAddTaskHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskForm, \"uvEel1g+4woT36Rf8BksHM6WefE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = TaskForm;\nexport default TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/TasksScheduler/src/Components/Content/Task/TaskForm.js"],"names":["Button","Offcanvas","NewTask","useDispatch","useSelector","React","useState","TaskForm","props","show","setShow","handleClose","handleShow","notification","prevState","dispatch","onAddTaskHandler","task","type","loading","response","fetch","method","body","JSON","stringify","headers","resp","json","name","id","message","document","querySelector","click","err"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,iBAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,8BAAP;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMK,WAAW,GAAG,MAAMD,OAAO,CAAC,KAAD,CAAjC;;AACA,QAAME,UAAU,GAAG,MAAMF,OAAO,CAAC,IAAD,CAAhC;;AAEA,QAAMG,YAAY,GAAGT,WAAW,CAAEU,SAAD,IAAe;AAC9C,WAAOA,SAAS,CAACD,YAAjB;AACD,GAF+B,CAAhC;AAGA,QAAME,QAAQ,GAAGZ,WAAW,EAA5B;;AACA,QAAMa,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AACvCF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAE;AAA5B,KAAD,CAAR;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mEAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAFR;AAGES,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAHX,OAF0B,CAA5B;AAQA,YAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AACA,UAAID,IAAI,CAACE,IAAT,EAAe;AACbd,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,KAAR;AAAeD,UAAAA,IAAI,EAAE,EAAE,GAAGA,IAAL;AAAWa,YAAAA,EAAE,EAAEH,IAAI,CAACE;AAApB;AAArB,SAAD,CAAR;AACAd,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAD,CAAR;AACAJ,QAAAA,QAAQ,CAAC;AACPG,UAAAA,IAAI,EAAE,cADC;AAEPL,UAAAA,YAAY,EAAE;AAAEkB,YAAAA,OAAO,EAAE;AAAX;AAFP,SAAD,CAAR,CAHa,CAOb;;AACAC,QAAAA,QAAQ,CAACC,aAAT,CAAuB,yBAAvB,EAAkDC,KAAlD;AACD;AACF,KApBD,CAoBE,OAAOC,GAAP,EAAY,CAAE;AACjB,GAvBD;;AAwBA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEvB,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAC6C,GAD7C,eAEE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEH,IAAjB;AAAuB,MAAA,MAAM,EAAEE,WAA/B;AAA4C,MAAA,SAAS,EAAC,KAAtD;AAAA,8BACE,QAAC,SAAD,CAAW,MAAX;AAAkB,QAAA,WAAW,MAA7B;AAAA,+BACE,QAAC,SAAD,CAAW,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD,CAAW,IAAX;AAAA,+BACE,QAAC,OAAD;AAAS,UAAA,OAAO,EAAEK;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA9CD;;GAAMT,Q;UAKiBH,W,EAGJD,W;;;KARbI,Q;AAgDN,eAAeA,QAAf","sourcesContent":["import { Button, Offcanvas } from \"react-bootstrap\";\nimport NewTask from \"./NewTask\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../../Assets/TaskForm.css\";\nimport React, { useState } from \"react\";\n\nconst TaskForm = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const notification = useSelector((prevState) => {\n    return prevState.notification;\n  });\n  const dispatch = useDispatch();\n  const onAddTaskHandler = async (task) => {\n    dispatch({ type: \"loading\", loading: true });\n    try {\n      const response = await fetch(\n        \"https://shekhar-test-dcbe5-default-rtdb.firebaseio.com/tasks.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(task),\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n      const resp = await response.json();\n      if (resp.name) {\n        dispatch({ type: \"add\", task: { ...task, id: resp.name } });\n        dispatch({ type: \"loading\", loading: false });\n        dispatch({\n          type: \"notification\",\n          notification: { message: \"Task has been added sucessfully..!!!\" },\n        });\n        // Close the Add New Form once Added\n        document.querySelector(\".add-task-header>button\").click();\n      }\n    } catch (err) {}\n  };\n  return (\n    <React.Fragment>\n      <Button onClick={handleShow}>+Add</Button>{\" \"}\n      <Offcanvas show={show} onHide={handleClose} placement=\"end\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>New Task</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <NewTask addTask={onAddTaskHandler} />\n        </Offcanvas.Body>\n      </Offcanvas>\n    </React.Fragment>\n  );\n};\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}