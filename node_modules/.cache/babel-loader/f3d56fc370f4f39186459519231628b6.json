{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  notification: {},\n  filteredTasks: {\n    tasks: [],\n    value: \"\"\n  },\n  emailIsValid: false,\n  passwordIsValid: false\n};\n\nconst taskManager = function () {\n  let taskState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"fetch\") {\n    return {\n      tasks: action.tasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"add\") {\n    return {\n      tasks: [...taskState.tasks, action.task],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"edit\") {\n    const updatedTasks = [];\n\n    for (let i = 0; i < taskState.tasks.length; i++) {\n      if (taskState.tasks[i].id === action.task.id) {\n        updatedTasks.push(action.task);\n      } else {\n        updatedTasks.push(taskState.tasks[i]);\n      }\n    }\n\n    return {\n      tasks: updatedTasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"delete\") {\n    return {\n      tasks: [...taskState.tasks.filter(task => {\n        return task.id !== action.taskId;\n      })],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"loading\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"notification\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.isLoading,\n      notification: action.notification,\n      filteredTasks: taskState.filteredTasks\n    };\n  }\n\n  if (action.type === \"filter\") {\n    let updatedTasks = taskState.tasks;\n\n    if (action.filterpayload.filtervalue) {\n      updatedTasks = updatedTasks.filter(task => {\n        return task.title.toLowerCase().includes(action.filterpayload.filtervalue.toLowerCase());\n      });\n    }\n\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.loading,\n      notification: taskState.notification,\n      filteredTasks: {\n        tasks: updatedTasks,\n        value: action.filterpayload.filtervalue\n      }\n    };\n  }\n\n  return taskState;\n};\n\nconst store = createStore(taskManager);\nexport default store;","map":{"version":3,"sources":["/home/allareddisekharreddy/Aritic/TasksScheduler/src/Redux/store.js"],"names":["createStore","initialState","tasks","isLoading","notification","filteredTasks","value","emailIsValid","passwordIsValid","taskManager","taskState","action","type","task","updatedTasks","i","length","id","push","filter","taskId","loading","filterpayload","filtervalue","title","toLowerCase","includes","store"],"mappings":"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","sourcesContent":["import { createStore } from \"redux\";\n\nconst initialState = {\n  tasks: [],\n  isLoading: false,\n  notification: {},\n  filteredTasks: { tasks: [], value: \"\" },\n  emailIsValid: false,\n  passwordIsValid: false,\n};\nconst taskManager = (taskState = initialState, action) => {\n  if (action.type === \"fetch\") {\n    return {\n      tasks: action.tasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"add\") {\n    return {\n      tasks: [...taskState.tasks, action.task],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"edit\") {\n    const updatedTasks = [];\n    for (let i = 0; i < taskState.tasks.length; i++) {\n      if (taskState.tasks[i].id === action.task.id) {\n        updatedTasks.push(action.task);\n      } else {\n        updatedTasks.push(taskState.tasks[i]);\n      }\n    }\n    return {\n      tasks: updatedTasks,\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"delete\") {\n    return {\n      tasks: [\n        ...taskState.tasks.filter((task) => {\n          return task.id !== action.taskId;\n        }),\n      ],\n      isLoading: taskState.isLoading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n\n  if (action.type === \"loading\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: action.loading,\n      notification: taskState.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"notification\") {\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.isLoading,\n      notification: action.notification,\n      filteredTasks: taskState.filteredTasks,\n    };\n  }\n  if (action.type === \"filter\") {\n    let updatedTasks = taskState.tasks;\n    if (action.filterpayload.filtervalue) {\n      updatedTasks = updatedTasks.filter((task) => {\n        return task.title\n          .toLowerCase()\n          .includes(action.filterpayload.filtervalue.toLowerCase());\n      });\n    }\n    return {\n      tasks: taskState.tasks,\n      isLoading: taskState.loading,\n      notification: taskState.notification,\n      filteredTasks: {\n        tasks: updatedTasks,\n        value: action.filterpayload.filtervalue,\n      },\n    };\n  }\n  return taskState;\n};\nconst store = createStore(taskManager);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}